plugins {
    id 'com.android.library'
    id("maven-publish")
}

group = 'com.koai-dev'
version = '1.0.0'

android {
    compileSdk 34

    defaultConfig {
        minSdkVersion 21
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig = true
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
    lint {
        abortOnError true
        baseline file('lint-baseline.xml')
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:support-annotations:25.3.1'
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.android.support:design:25.3.1'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.8.0'
    testImplementation 'junit:junit:4.12'
}


afterEvaluate{
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.koai-dev'
                artifactId = 'android-dialer'
                version = '1.0.0'

                afterEvaluate {
                    from components.release
                }
            }
        }
    }
}

task createReleaseTag {
    doLast {
        def tagName = "1.0.0"
        try {
            exec {
                commandLine("git", "tag", "-a", tagName, "-m", "Release tag $tagName")
            }

            exec {
                commandLine("git", "push", "origin", tagName)
            }
        } catch (e) {
            println(e.toString())
        }
    }
}